name: CI

on:
  schedule:
    - cron: "0 7 * * 1"
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

permissions:
  contents: read

jobs:
  lint:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3.5.2
        with:
          submodules: recursive

      - name: Prepare build environemnt
        id: prepare
        uses: ./.github/actions/prepare-build-env

      - name: Run cargo clippy
        run: |
          cargo clippy --target wasm32-unknown-unknown \
            --tests --all-features -- --deny "warnings"
        #TODO: this should be integrated for PR builds
        #uses: actions-rs/clippy-check@v1.0.7
        #with:
        #  token: ${{ secrets.GITHUB_TOKEN }}
        #  args: --target wasm32-unknown-unknown --tests --all-features

      - name: Post build environemnt
        if: always()
        uses: ./.github/actions/post-build-env
        with:
          cargo-cache-primary-key: ${{ steps.prepare.outputs.cargo-cache-primary-key }}
          cargo-cache-hit: ${{ steps.prepare.outputs.cargo-cache-hit }}

  build:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3.5.2
        with:
          submodules: recursive

      - name: Prepare build environemnt
        id: prepare
        uses: ./.github/actions/prepare-build-env

      - name: Run wasm-pack build
        run: wasm-pack build --release --target web

      - name: Run wasm-opt optimization
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_112/binaryen-version_112-x86_64-linux.tar.gz
          tar zxf binaryen-version_112-x86_64-linux.tar.gz
          ./binaryen-version_112/bin/wasm-opt -Os -o pkg/wgpu_layers_bg.wasm pkg/wgpu_layers_bg.wasm

      - name: Check wasm artifact size
        run: |
          brotli -Z pkg/wgpu_layers_bg.wasm
          gzip -k pkg/wgpu_layers_bg.wasm
          ls -lh pkg/
          [[ $(stat -c %s pkg/wgpu_layers_bg.wasm.br) -lt 110000 ]]

      - name: Post build environemnt
        if: always()
        uses: ./.github/actions/post-build-env
        with:
          cargo-cache-primary-key: ${{ steps.prepare.outputs.cargo-cache-primary-key }}
          cargo-cache-hit: ${{ steps.prepare.outputs.cargo-cache-hit }}

  unit-test:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3.5.2
        with:
          submodules: recursive

      - name: Prepare build environemnt
        id: prepare
        uses: ./.github/actions/prepare-build-env

      - name: Use libegl1-mesa latest
        uses: ./.github/actions/install-graphics-driver

      - name: Run cargo test
        run: |
          cargo test --target `rustc -vV | sed -n 's|host: ||p'` -- --nocapture

      - name: Post build environemnt
        if: always()
        uses: ./.github/actions/post-build-env
        with:
          cargo-cache-primary-key: ${{ steps.prepare.outputs.cargo-cache-primary-key }}
          cargo-cache-hit: ${{ steps.prepare.outputs.cargo-cache-hit }}

  integration-test:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        browser: [chrome, firefox]
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3.5.2
        with:
          submodules: recursive

      - name: Prepare build environemnt
        id: prepare
        uses: ./.github/actions/prepare-build-env

      - name: Use libegl-mesa0 latest
        uses: ./.github/actions/install-graphics-driver

      - name: Use firefox nightly
        if: matrix.browser == 'firefox'
        run: |
          wget https://download-installer.cdn.mozilla.net/pub/firefox/nightly/latest-mozilla-central/firefox-114.0a1.en-US.linux-x86_64.tar.bz2
          mkdir /tmp/firefox-nightly && tar -xf *.tar.bz2 -C /tmp/firefox-nightly

      - name: Print browser version
        if: matrix.browser == 'firefox'
        run: firefox-trunk -version

      - name: Print browser version
        if: matrix.browser == 'chrome'
        run: google-chrome --version

      - name: Run wasm-pack test
        run: xvfb-run -a -s "-screen 0 1920x1080x24" wasm-pack test --${{ matrix.browser }} --headless --release --features console_log,console_error_panic_hook --test '*'

      - name: Post build environemnt
        if: always()
        uses: ./.github/actions/post-build-env
        with:
          cargo-cache-primary-key: ${{ steps.prepare.outputs.cargo-cache-primary-key }}
          cargo-cache-hit: ${{ steps.prepare.outputs.cargo-cache-hit }}